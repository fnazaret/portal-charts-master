apiVersion: v1
kind: ConfigMap
metadata:
  name: runtimes-def-configmap
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    run: runtimes-def-configmap
data:
  jupyter-server.json: |
    {
      "displayName": "Jupyter with Python 2.7, Scala 2.11, R 3.4.1",
      "description": "Jupyter Notebook Server with Anaconda2 4.4, Python 2.7, Scala 2.11, R 3.4.1",
      "author": "IBM",
      "tested": true,
      "isService": true,
      "runtimeType": "jupyter",
      "portMappings": [
        {
          "servicePort": 8888,
          "containerPort": 8888,
          "protocol": "TCP"
        }
      ],
      "replicas": 1,
      "image": "{{ .Values.jupyter.image.repository }}:{{ .Values.jupyter.image.tag }}",
      "command": ["/usr/local/bin/start-dsx-notebook.sh"],
      "volumes": [
        {
          "volume": "user-home",
          "mountPath": "/user-home",
          {{- if .Values.userHomePvc.persistence.existingClaimName }}
          "claimName": {{ .Values.userHomePvc.persistence.existingClaimName | quote }}
          {{- else }}
          "claimName": "{{ template "fullname" . }}-{{ .Values.userHomePvc.name }}"
          {{- end }}
        },
        {
          "volume": "spark-metrics-mount",
          "mountPath": "/tmp/spark-events",
          {{- if .Values.userHomePvc.persistence.existingClaimName }}
          "claimName": {{ .Values.sparkMetricsPvc.persistence.existingClaimName | quote }}
          {{- else }}
          "claimName": "{{ template "fullname" . }}-{{ .Values.sparkMetricsPvc.name }}"
          {{- end }}
        }
      ],
      "probes": {
        "liveness": {
          "path": "/dsx-jupyter/${userNS}/${projectId}/tree",
          "scheme": "https",
          "port": 8888,
          "initialDelaySeconds": 120,
          "timeoutSeconds": 10,
          "periodSeconds": 10
        },
        "readiness": {
          "path": "/dsx-jupyter/${userNS}/${projectId}/tree",
          "scheme": "https",
          "port": 8888,
          "initialDelaySeconds": 15,
          "timeoutSeconds": 10,
          "periodSeconds": 10
        }
      },
      "resources": {
        "cpu": {
          "request": 1000,
          "minimum": 1000
        },
        "gpu": {
          "request": 0,
          "minimum": 0
        },
        "memory": {
          "request": 5120,
          "minimum": 2048
        },
        "duration": {
          "value": -1,
          "units": "unix"
        }
      }
    }
  zeppelin-server.json: |
    {
      "displayName": "Zeppelin with Anaconda2, Python 2.7",
      "description": "Jupyter Notebook Server with Anaconda2 4.4, Python 2.7, Scala 2.11, R 3.4.1",
      "author": "IBM",
      "tested": true,
      "isService": true,
      "runtimeType": "zeppelin",
      "portMappings": [
        {
          "servicePort": 8080,
          "containerPort": 8080,
          "protocol": "TCP"
        }
      ],
      "replicas": 1,
      "image": "{{ .Values.zeppelin.image.repository }}:{{ .Values.zeppelin.image.tag }}",
      "command": ["/usr/local/bin/start-dsx-notebook.sh"],
      "volumes": [
        {
          "volume": "user-home",
          "mountPath": "/user-home",
          {{- if .Values.userHomePvc.persistence.existingClaimName }}
          "claimName": {{ .Values.userHomePvc.persistence.existingClaimName | quote }}
          {{- else }}
          "claimName": "{{ template "fullname" . }}-{{ .Values.userHomePvc.name }}"
          {{- end }}
        },
        {
          "volume": "spark-metrics-vol00",
          "mountPath": "/tmp/spark-events",
          {{- if .Values.userHomePvc.persistence.existingClaimName }}
          "claimName": {{ .Values.sparkMetricsPvc.persistence.existingClaimName | quote }}
          {{- else }}
          "claimName": "{{ template "fullname" . }}-{{ .Values.sparkMetricsPvc.name }}"
          {{- end }}
        }
      ],
      "probes": {
        "liveness": {
          "path": "/#",
          "scheme": "http",
          "port": 8080,
          "initialDelaySeconds": 120,
          "timeoutSeconds": 10,
          "periodSeconds": 10
        },
        "readiness": {
          "path": "/#",
          "scheme": "http",
          "port": 8080,
          "initialDelaySeconds": 15,
          "timeoutSeconds": 10,
          "periodSeconds": 10
        }
      },
      "resources": {
        "cpu": {
          "request": 1000,
          "minimum": 1000
        },
        "gpu": {
          "request": 0,
          "minimum": 0
        },
        "memory": {
          "request": 5120,
          "minimum": 2048
        },
        "duration": {
          "value": -1,
          "units": "unix"
        }
      }
    }
  rstudio-server.json: |
    {
      "displayName": "RStudio with R 3.3.2",
      "description": "RStudio Server 1.0 with R 3.3.2",
      "author": "IBM",
      "tested": true,
      "isService": true,
      "runtimeType": "rstudio",
      "portMappings": [
        {
          "servicePort": 8787,
          "containerPort": 8787,
          "protocol": "TCP"
        },
        {
          "servicePort": 3838,
          "containerPort": 3838,
          "protocol": "TCP"
        }
      ],
      "replicas": 1,
      "image": "{{ .Values.rstudio.image.repository }}:{{ .Values.rstudio.image.tag }}",
      "privileged": false,
      "command": ["/scripts/startup.sh"],
      "volumes": [
        {
          "volume": "user-home",
          "mountPath": "/user-home",
          {{- if .Values.userHomePvc.persistence.existingClaimName }}
          "claimName": {{ .Values.userHomePvc.persistence.existingClaimName | quote }}
          {{- else }}
          "claimName": "{{ template "fullname" . }}-{{ .Values.userHomePvc.name }}"
          {{- end }}
        }
      ],
      "probes": {
        "liveness": {
          "path": "/",
          "scheme": "http",
          "port": 8787,
          "initialDelaySeconds": 120,
          "timeoutSeconds": 10,
          "periodSeconds": 10
        },
        "readiness": {
          "path": "/",
          "scheme": "http",
          "port": 8787,
          "initialDelaySeconds": 15,
          "timeoutSeconds": 10,
          "periodSeconds": 10
        }
      },
      "resources": {
        "cpu": {
          "request": 2000,
          "minimum": 2000
        },
        "gpu": {
          "request": 0,
          "minimum": 0
        },
        "memory": {
          "request": 5120,
          "minimum": 5120
        },
        "duration": {
          "value": -1,
          "units": "unix"
        }
      }
    }
