###############################################################################
#
# Licensed Materials - Property of IBM
#
# (C) Copyright IBM Corp. 2018. All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
###############################################################################
# Defines the pod that runs the UI web server
###############################################################################
{{- include "sch.config.init" (list . "rest.sch.chart.config.values") -}}
{{ $namePrefix := .sch.chart.components.ui.deployment.name -}}
{{ $name := include "sch.names.fullCompName" (list . $namePrefix ) -}}
{{ $id := (include "asDnsLabel" .Release.Name) }}
# Component is 'ui' as this makes up part of implementing the web UI
{{ $compName := .sch.chart.components.ui.compName -}}
{{ $labels := include "sch.metadata.labels.standard" (list . $compName (dict "serviceSelector" $namePrefix)) -}}
# Service allowing access to the REST API server
{{ $restService := .sch.chart.components.rest.service.name -}}
{{ $restServiceName := include "sch.names.fullCompName" (list . $restService) -}}
# Oauth secret name which is used by the UI
{{ $uiOauthSecretName := .sch.chart.components.ui.oauthSecret.name -}}
{{ $oauthSecretName := include "sch.names.fullCompName" (list . $uiOauthSecretName) -}}
# Service Account to grant Kubernetes access
{{ $serviceAccount := .sch.chart.components.kafka.serviceAccount.name -}}
{{ $serviceAccountName := include "sch.names.fullCompName" (list . $serviceAccount ) -}}
# Secret and config map used by the proxy container
{{ $secret := .sch.chart.components.proxy.secret.name -}}
{{ $secretName := include "sch.names.fullCompName" (list . $secret) | quote -}}
{{ $configMap := .sch.chart.components.uiproxy.configMap.name -}}
{{ $configMapName := include "sch.names.fullCompName" (list . $configMap) | quote -}}
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: {{ $name | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
{{ $labels | indent 4 }}
  annotations:
    helm.sh/created: {{ .Release.Time.Seconds | quote }}
spec:
  replicas: {{ .sch.config.ui.replicas }}
  selector:
    matchLabels:
      release: {{ .Release.Name | quote }}
      serviceSelector: {{ $namePrefix | quote }}
  template:
    metadata:
      namespace: {{ .Release.Namespace | quote }}
      labels:
{{ $labels | indent 8 }}
      annotations:
      {{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering) | indent 8 }}
    spec:
      serviceAccountName: {{ $serviceAccountName | quote }}
      {{- if .Values.global.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.global.image.pullSecret }}
      {{- end }}
      volumes:
      {{- include "license.accept.ref" . | indent 6 }}
      affinity:
      {{- include "customNodeaffinity" . | indent 6 }}
      # UI pods are made up of two containers
      #  1) UI web server
      #  2) redis container for persisting user sessions
      containers:
        #
        # UI web server pods
        - name: "ui"
          image: "{{ .Values.global.image.repository }}/eventstreams-ui:{{ .sch.chart.images.uiTag }}"
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          resources:
            limits:
{{ toYaml .sch.config.ui.resources.limits | indent 14 }}
            requests:
{{ toYaml .sch.config.ui.resources.requests | indent 14 }}
          livenessProbe:
            httpGet:
              path: /status
              port: {{ .sch.config.ui.ports.port }}
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /status
              port: {{ .sch.config.ui.ports.port }}
            initialDelaySeconds: 30
            periodSeconds: 10
          env:
            {{- include "license.accept.env.ref" . | indent 10 }}
            - name: ID
              value: "{{ $id }}"
            - name: "API_URL"
              value: "http://{{ $restServiceName }}:{{ .sch.config.rest.ports.targetPort }}"
            - name: "CLIENT_ID"
              valueFrom:
                secretKeyRef:
                  name: {{ $oauthSecretName }}
                  key: "username"
            - name: "CLIENT_SECRET"
              valueFrom:
                secretKeyRef:
                  name: {{ $oauthSecretName }}
                  key: "password"
            - name: "CLUSTER_EXTERNAL_IP"
              valueFrom:
                secretKeyRef:
                  name: {{ $oauthSecretName }}
                  key: "clusterExternalIP"
            - name: "CLUSTER_EXTERNAL_PORT"
              valueFrom:
                secretKeyRef:
                  name: {{ $oauthSecretName }}
                  key: "clusterExternalPort"
        #
        # redis pods
        - name: redis
          image: "redis"
          imagePullPolicy: Always
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - /usr/local/bin/redis-cli -h $(hostname) ping
            failureThreshold: 2
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - /usr/local/bin/redis-cli -h $(hostname) ping
            failureThreshold: 2
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
        # Proxy server container
        - name: "proxy"
          image: "{{ .Values.global.image.repository }}/eventstreams-proxy:{{ .sch.chart.images.proxyTag }}"
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          env:
            {{- include "license.accept.env.ref" . | indent 10 }}
            - name: CONFIG_MAP_NAME
              value: {{ $configMapName }}
            - name: TLS_CERT
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  key: "tls.cert"
            - name: TLS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  key: "tls.key"
          ports:
            - name: uiendpoint
              containerPort: {{ .sch.config.ui.proxy.port }}
          readinessProbe:
            httpGet:
              path: "/ready"
              port: 8080
            initialDelaySeconds: 1
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: "/live"
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 15
      terminationGracePeriodSeconds: 60
