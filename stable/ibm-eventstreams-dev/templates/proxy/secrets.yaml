###############################################################################
#
# Licensed Materials - Property of IBM
#
# (C) Copyright IBM Corp. 2018. All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
###############################################################################
# Defines the secrets used to enable the proxy to ensure secured access to
#  the Kafka cluster
###############################################################################
{{ if eq .Values.license "accept" -}}
{{ $namePrefix := .sch.chart.components.proxy.secret.name -}}
{{ $name := include "sch.names.fullCompName" (list . $namePrefix) -}}
{{ $relLabel := (include "asK8sLabel" .Release.Name) -}}
# Component is 'proxy' as these secrets are used by the Kafka proxy
{{ $compName := .sch.chart.components.proxy.compName -}}
{{ $labels := include "sch.metadata.labels.standard" (list . $compName) -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $name | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
{{ $labels | indent 4 }}
type: Opaque
data:
{{- if eq .Values.tls.type  "provided"}}
# user has supplied their own certificate details
  {{- if empty .Values.tls.key }}
    {{ fail "Configuration error: Please enter the Base64 encoded TLS private key in Secure connections section." }}
  {{- end }}
  {{- if empty .Values.tls.cert }}
    {{ fail "Configuration error: Please enter the Base64 encoded TLS certificate in Secure connections section." }}
  {{- end }}
  {{- if empty .Values.tls.cacert }}
    {{ fail "Configuration error: Please enter the Base64 encoded CA certificate in Secure connections section." }}
  {{- end }}
  {{- if regexMatch "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$" .Values.tls.key }}
  tls.key: {{ .Values.tls.key }}
  {{- else }}
    {{ fail "Configuration error: Please enter a valid Base64 encoded TLS private key in Secure connections section." }}
  {{- end }}
  {{- if regexMatch "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$" .Values.tls.cert }}
  tls.cert: {{ .Values.tls.cert }}
  {{- else }}
    {{ fail "Configuration error: Please enter a valid Base64 encoded TLS certificate in Secure connections section." }}
  {{- end }}
  {{- if regexMatch "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$" .Values.tls.cacert }}
  tls.cacert: {{ .Values.tls.cacert }}
  {{- else }}
    {{ fail "Configuration error: Please enter a valid Base64 encoded CA certificate in Secure connections section." }}
  {{- end }}
{{- end }}
{{- if eq .Values.tls.type  "selfsigned"}}
  {{- if .Values.tls.key }}
  {{ fail "Configuration error: You selected self-signed certificate, please do not provide a TLS private key." }}
  {{- end }}
  {{- if .Values.tls.cert }}
  {{ fail "Configuration error: You selected self-signed certificate, please do not provide a TLS certificate." }}
  {{- end }}
  {{- if .Values.tls.cacert }}
  {{ fail "Configuration error: You selected self-signed certificate, please do not provide CA certificate." }}
  {{- end }}
  {{- if empty .Values.proxy.externalEndpoint }}
  {{ fail "Configuration error: You selected self-signed certificate, please provide the IP address." }}
  {{- end }}
# this path will generate a self signed certifcate
  {{- $commonName := .Values.proxy.externalEndpoint }}
  {{- $altName1 := print $relLabel  }}
  {{- $selfcert := genSelfSignedCert $commonName nil (list $altName1) 3650 }}
  tls.cert: {{ b64enc $selfcert.Cert }}
  tls.key: {{ b64enc $selfcert.Key }}
{{ end -}}
{{ end -}}