# Licensed Materials - Property of IBM
# 5737-E67
# @ Copyright IBM Corporation 2016, 2018. All Rights Reserved.
# US Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.

apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ template "logstash.fullname" . }}-config"
  labels:
    app: "{{ template "elasticsearch.fullname" . }}"
    component: "{{ .Values.logstash.name }}"
    release: "{{ .Release.Name }}"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: "{{ .Release.Service }}"
data:
  logstash.yml-x86: |-
    # x86-only config. Must include refs to X-Pack.
{{ include "logstash.config" . | indent 4 }}
{{ include "logstash.xpack" . | indent 4 }}
    # end
  logstash.yml-ppc: |-
    # ppc64le-only config. Must not include refs to X-Pack.
{{ include "logstash.config" . | indent 4 }}
    # end
  k8s.conf: |-
    input {
      beats {
        port => {{ .Values.logstash.port }}
{{- if .Values.security.enabled }}
        ssl => true
        ssl_certificate_authorities => ["/usr/share/elasticsearch/config/tls/ca.crt"]
        ssl_certificate => "/usr/share/elasticsearch/config/tls/logstash.crt"
        ssl_key => "/usr/share/elasticsearch/config/tls/logstash.key"
        ssl_key_passphrase => "${APP_KEYSTORE_PASSWORD}"
        ssl_verify_mode => "force_peer"
{{- end }}
      }
    }

    filter {
      if [type] == "kube-logs" {
        mutate {
          rename => { "message" => "log" }
          remove_field => ["host"]
        }

        date {
          match => ["time", "ISO8601"]
        }

        # Sample:
        # tiller-1279707952-sgd08_kube-system_tiller-0c51282d195d1c21307f6a48b9118d690441cda498fc5a2790c043407eab235b.log
        # filebeat-j357d_default_filebeat-1a3113e374ad7937a3efa36c4bb42b46b976bcd7cd96223e6b9e6e3df08d802a.log
        # appstdoutpod_default_app-stdout-container-01c2e7a7b105d9141825ea3ae5634b580fdd20a5a4ee890cdbe0816ca002623c.log
        # unified-router-4047118581-sm913_kube-system_unified-router-ddda8a8cbcb74c45b64a4b18997b4f2928c998a37e45037cd0304eaa56d1634f.log
        dissect {
          mapping => {
            "source" => "/var/log/containers/%{kubernetes.pod}_%{kubernetes.namespace}_%{container_file_ext}"
          }
        }

        dissect {
          mapping => {
            "container_file_ext" => "%{container}.%{?file_ext}"
          }
          remove_field => ["host", "container_file_ext"]
        }

        grok {
          "match" => {
            "container" => "^%{DATA:kubernetes.container_name}-(?<kubernetes.container_id>[0-9A-Za-z]{64,64})"
          }
          remove_field => ["container"]
        }
      }
    }

    filter {
      # Drop empty lines
      if [log] =~ /^\s*$/ {
        drop { }
      }
      # Attempt to parse JSON, but ignore failures and pass entries on as-is
      json {
        source => "log"
        skip_on_invalid_json => true
      }
    }

    output {
      elasticsearch {
        hosts => "{{ .Values.elasticsearch.name }}:{{ .Values.elasticsearch.client.restPort }}"
        index => "logstash-%{+YYYY.MM.dd}"
        document_type => "%{[@metadata][type]}"
{{- if .Values.security.enabled }}
        ssl => true
        ssl_certificate_verification => true
        keystore => "/usr/share/elasticsearch/config/tls/logstash-elasticsearch-keystore.jks"
        keystore_password => "${APP_KEYSTORE_PASSWORD}"
        truststore => "/usr/share/elasticsearch/config/tls/truststore.jks"
        truststore_password => "${CA_TRUSTSTORE_PASSWORD}"
{{- end }}
      }
    }
{{ if .Values.logstash.probe.enabled }}
  app.json: |-
    {
      "logstashPoller": {
        "periodSeconds": {{ .Values.logstash.probe.periodSeconds }},
        "minEventsPerPeriod": {{ .Values.logstash.probe.minEventsPerPeriod }},
        "maxUnavailablePeriod": {{ .Values.logstash.probe.maxUnavailablePeriod }},
        "logstash": {
          "name": "{{ .Values.logstash.name }}",
          "host": "127.0.0.1",
          "port": 9600
        }
      },
      "server": {
        "port": 9601,
        "pretty": true
      }
    }
{{ end }}
