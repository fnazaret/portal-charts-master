###############################################################################
# Licensed Materials - Property of IBM.
# Copyright IBM Corporation 2018. All Rights Reserved.
# U.S. Government Users Restricted Rights - Use, duplication or disclosure
# restricted by GSA ADP Schedule Contract with IBM Corp.
#
# Contributors:
#  IBM Corporation - initial API and implementation
###############################################################################
{{- include "sch.config.init" (list . "sch.chart.config.values") }}
{{- $compName := .sch.chart.components.common.secretGeneratorName }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "sch.names.fullCompName" (list . $compName) | quote }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 4 }}
data:
  gen-keystore.sh: |-
    #!/bin/sh

    SECRET_NAME=$((`kubectl get secrets -n {{ .Release.Namespace | quote }} 2>&1 | grep -o -w -E "^{{ include "sch.names.fullCompName" (list . $compName) }}" | wc -l`))
    if [ "$SECRET_NAME" -eq 1 ]; then
      echo "Using existing ${SECRET_NAME} secrets"
      exit 0
    fi

    RELEASE_NAME="{{ .Release.Name }}"
    APP_NAME="{{ include "sch.names.appName" (list .) }}"
    COMPONENT_NAME="{{ $compName }}"
    SECRET_NAME={{ include "sch.names.fullCompName" (list . $compName) }}
    SERVER_NAME=defaultServer
    PASSWORD=$(openssl rand -base64 32)
    KEYSTORE=/usr/keystore

    keytool -help > /dev/null 2>&1
    if [ $? != 0 ]; then
      echo "Error: keytool is missing from the path, please correct this, then retry"
      exit 1
    fi
    openssl version > /dev/null 2>&1
    if [ $? != 0 ]; then
      echo "Error: openssl is missing from the path, please correct this, then retry"
      exit 1
    fi
    if test -d ${KEYSTORE}; then
      echo "keystore directory exist";
    else
      mkdir ${KEYSTORE}
    fi

    echo "Generating key stores using ${SERVER_NAME}"
    # Create server self-signed certificate and key
    openssl req -x509 -newkey rsa:2048 -keyout ${KEYSTORE}/server.key -out ${KEYSTORE}/server.crt -days 365 -nodes -subj "/CN=localhost/OU=${SERVER_NAME}/O=IBM/C=US"
    # Export server self-signed certificate and key to PKCS12
    openssl pkcs12 -export -in ${KEYSTORE}/server.crt -inkey ${KEYSTORE}/server.key -out ${KEYSTORE}/key.p12 -name default -passout pass:${PASSWORD}
    # Import server PKCS12  file to the keystore trust.jks file
    keytool -importkeystore -deststorepass ${PASSWORD} -destkeypass ${PASSWORD} -destkeystore ${KEYSTORE}/key.jks -srckeystore ${KEYSTORE}/key.p12 -srcstoretype PKCS12 -srcstorepass ${PASSWORD} -alias default
    # Import server self-sign certificate to keystore trust.jks file
    keytool -importcert -keystore ${KEYSTORE}/trust.jks -storepass ${PASSWORD} -file ${KEYSTORE}/server.crt -alias default -noprompt

    echo "Creating Kubernetes ${SECRET_NAME} secret"
    kubectl create secret generic ${SECRET_NAME} -n {{ .Release.Namespace | quote }} --from-file=key.jks=${KEYSTORE}/key.jks --from-file=trust.jks=${KEYSTORE}/trust.jks --from-file=server.key=${KEYSTORE}/server.key --from-file=server.crt=${KEYSTORE}/server.crt --from-literal=keystorePassword=${PASSWORD}
    kubectl label secret ${SECRET_NAME} -n {{ .Release.Namespace | quote }} release=${RELEASE_NAME} app=${APP_NAME} component=${COMPONENT_NAME}

    # clean up
    rm -vf ${KEYSTORE}/key.p12 ${KEYSTORE}/server.key ${KEYSTORE}/server.crt ${KEYSTORE}/key.jks ${KEYSTORE}/trust.jks
